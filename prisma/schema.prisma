// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  active         Boolean?  @default(false)
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  commands Commands?
  apisettings ApiSettings?
  server Server?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  discord_avatar    String?
  discord_token     String? @db.String
  discord_refresh_token     String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Commands {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  prefixCommand String?
  customCommand Json     // Store customCommand as JSON data type
  createdAt    DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId 
}

model ApiSettings {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  settings Json     // Store settings as JSON data type
  createdAt    DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId 
}

model Server {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  serverId String?
  createdAt    DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId 
  Plugins Plugin[]
}

model Plugin {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  enabled      Boolean   @default(false)
  server       Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId     String @unique @db.ObjectId

  // Other plugin-specific fields
}

